#
# Variable declarations. You can set variables here 
# for use in the directives below. Example:
# PROXY = proxy.joedog.org
# Reference variables inside ${} or $(), example: 
# proxy-host = ${PROXY} 
# You can also reference ENVIRONMENT variables without
# actually declaring them, example:
# logfile = $(HOME)/var/siege.log

#
# Signify verbose mode, true turns on verbose output
# ex: verbose = true|false
#
verbose = true

#
# CSV Verbose format: with this option, you can choose 
# to format verbose output in traditional siege format 
# or comma separated format. The latter will allow you 
# to redirect output to a file for import into a spread
# sheet, i.e., siege > file.csv 
# ex: csv = true|false (default false)
#
# csv = true

#
# Timestamp format: with this option, you can choose to
# print a timestamp each line of output
# example: timestamp = true|false (default false)
#
# sample: [Sat, 2010-11-20 10:39:13] HTTP/1.1 200   0.12 secs:    4003 bytes ==> / 
# 
timestamp = true

#
# Full URL verbose format: By default siege displays
# the URL path and not the full URL. With this option, 
# you # can instruct siege to show the complete URL.
# ex: fullurl = true|false (default false)
# 
fullurl = true

#
# Display id: in verbose mode, display the siege user
# id associated with the HTTP transaction information
# ex: display-id = true|false
#
#display-id = true

#
# Show logfile location.  By default, siege displays the
# logfile location at the end of every run when logging
# You can turn this message off with this directive.
# ex: show-logfile = false
#
show-logfile = false

#
# Default logging status, true turns logging on.
# ex: logging = true|false
#
logging = true

#
# Logfile, the default siege logfile is $PREFIX/var/siege.log
# This directive allows you to choose an alternative log file.
# Environment variables may be used as shown in the examples:
# ex: logfile = /home/jeff/var/log/siege.log
#     logfile = ${HOME}/var/log/siege.log
#     logfile = ${LOGFILE}
#
logfile = siege.log

#
# HTTP protocol.  Options HTTP/1.1 and HTTP/1.0.
# Some webservers have broken implementation of the
# 1.1 protocol which skews throughput evaluations.
# If you notice some siege clients hanging for
# extended periods of time, change this to HTTP/1.0
# ex: protocol = HTTP/1.1
#     protocol = HTTP/1.0
#
protocol = HTTP/1.1

#
# Chunked encoding is required by HTTP/1.1 protocol
# but siege allows you to turn it off as desired.
# 
# ex: chunked = true 
# 
chunked = true

# 
# Cache revalidation.
# Siege supports cache revalidation for both ETag and 
# Last-modified headers. If a copy is still fresh, the 
# server responds with 304. 
# HTTP/1.1 200   0.00 secs:    2326 bytes ==> /apache_pb.gif
# HTTP/1.1 304   0.00 secs:       0 bytes ==> /apache_pb.gif
# HTTP/1.1 304   0.00 secs:       0 bytes ==> /apache_pb.gif
# 
# ex: cache = true
#
cache = false

#
# Connection directive. Options "close" and "keep-alive"
# Starting with release 2.57b3, siege implements persistent 
# connections in accordance to RFC 2068 using both chunked
# encoding and content-length directives to determine the 
# page size. To run siege with persistent connections set
# the connection directive to keep-alive. (Default close)
# CAUTION: use the keep-alive directive with care.
# DOUBLE CAUTION: this directive does not work well on HPUX
# TRIPLE CAUTION: don't use keep-alives until further notice
# ex: connection = close
#     connection = keep-alive
#
connection = close

#
# Default number of simulated  concurrent users
# ex: concurrent = 25
#
concurrent = 5

#
# Default duration of the siege.  The right hand argument has
# a modifier which specifies the time units, H=hours, M=minutes,
# and S=seconds. If a modifier is not specified, then minutes 
# are assumed.
# ex: time = 50M
#
# time =

#
# Repetitions.  The length of siege may be specified in client
# reps rather then a time duration.  Instead of specifying a time
# span, you can tell each siege instance to hit the server X number
# of times.  So if you chose 'reps = 20' and you've selected 10 
# concurrent users, then siege will hit the server 200 times.
# ex: reps = 20
#
reps = 10

#
# Default delay value, see the siege(1) man page.  
# This value is used for load testing, it is not used 
# for benchmarking.
# ex: delay = 3
#
delay = .5

#
# Internet simulation. If true, siege clients will hit
# the URLs in the urls.txt file randomly, thereby simulating
# internet usage.  If false, siege will run through the 
# urls.txt file in order from first to last and back again.
# ex: internet = true
#
internet = true

#
# Default benchmarking value, If true, there is NO delay
# between server requests, siege runs as fast as the web
# server and the network will let it.  Set this to false 
# for load testing.
# ex: benchmark = true
# 
benchmark = true

#
# Set the siege User-Agent to identify yourself at the
# host, the default is: JoeDog/1.00 [en] (X11; I; Siege #.##) 
# But that wreaks of corporate techno speak.  Feel free
# to make it more interesting :-)  Since Limey is recovering
# from minor surgery as I write this, I'll dedicate the 
# example to him...
# ex: user-agent = Limey The Bulldog
# 
user-agent = Siege

#
# TURN OFF THAT ANNOYING SPINNER!
# Siege spawns a thread and runs a spinner to entertain you
# as it collects and computes its stats. If you don't like 
# this feature, you may turn it off here.
#
spinner = true

#
# Redirection support.  This option allows to to control
# whether a Location: hint will be followed.  Most users
# will want to follow redirection information, but sometimes
# it's desired to just get the Location information.
follow-location = true